=============================
Workbench
=============================
CREATE DATABASE shoppingcart;

USE shoppingcart;

CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(100),
  email VARCHAR(100),
  password VARCHAR(255)
);

CREATE TABLE products (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100),
  price DECIMAL(10,2),
  description TEXT
);




==============================
üì¶ PACKAGE INSTALLATION (BACKEND)
==============================
cd backend
npm init -y
npm install express mysql2 cors bcryptjs jsonwebtoken body-parser


==============================
üì¶ PACKAGE INSTALLATION (FRONTEND)
==============================
npx create-react-app .
npm install bootstrap axios react-router-dom




==============================
üñ•Ô∏è BACKEND: server.js
==============================
const express = require('express');
const mysql = require('mysql2');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');
const app = express();

app.use(cors());
app.use(bodyParser.json());

const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'shoppingcart'
});

// Register
app.post('/register', (req, res) => {
  const { username, email, password } = req.body;
  const hashed = bcrypt.hashSync(password, 8);
  db.query('INSERT INTO users (username, email, password) VALUES (?, ?, ?)',
    [username, email, hashed], (err) => {
      if (err) return res.status(500).json({ error: err });
      res.json({ message: 'User registered' });
    });
});

// Login
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  db.query('SELECT * FROM users WHERE username = ?', [username], (err, results) => {
    if (err || results.length === 0) return res.status(401).json({ message: 'User not found' });
    const user = results[0];
    if (!bcrypt.compareSync(password, user.password))
      return res.status(401).json({ message: 'Invalid password' });
    const token = jwt.sign({ id: user.id }, 'secret123', { expiresIn: '1h' });
    res.json({ token });
  });
});

// Middleware to verify token
const verifyToken = (req, res, next) => {
  const token = req.headers['authorization'];
  if (!token) return res.status(403).json({ message: 'No token provided' });
  jwt.verify(token.split(" ")[1], 'secret123', (err, decoded) => {
    if (err) return res.status(401).json({ message: 'Failed to authenticate token' });
    req.userId = decoded.id;
    next();
  });
};

// Get all products (Protected)
app.get('/products', verifyToken, (req, res) => {
  db.query('SELECT * FROM products', (err, results) => {
    if (err) return res.status(500).json({ error: err });
    res.json(results);
  });
});

// Add product
app.post('/products', verifyToken, (req, res) => {
  const { name, price, description } = req.body;
  db.query('INSERT INTO products (name, price, description) VALUES (?, ?, ?)',
    [name, price, description], (err) => {
      if (err) return res.status(500).json({ error: err });
      res.json({ message: 'Product added' });
    });
});

// Delete product
app.delete('/products/:id', verifyToken, (req, res) => {
  db.query('DELETE FROM products WHERE id = ?', [req.params.id], (err) => {
    if (err) return res.status(500).json({ error: err });
    res.json({ message: 'Product deleted' });
  });
});

app.listen(5000, () => console.log('Server running on port 5000'));




==============================
frontend index.js
==============================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import 'bootstrap/dist/css/bootstrap.min.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);





==============================
Frontend App.js
==============================
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Register from './components/Register';
import Login from './components/Login';
import Products from './components/Products';
import Navbar from './components/Navbar';

function App() {
  return (
    <Router>
      <Navbar />
      <Routes>
        <Route path="/" element={<Register />} />
        <Route path="/login" element={<Login />} />
        <Route path="/products" element={<Products />} />
      </Routes>
    </Router>
  );
}

export default App;






==============================
üßë FRONTEND: Navbar.jsx
==============================
// src/components/Navbar.jsx
import React from 'react';
import { Link } from 'react-router-dom';

export default function Navbar() {
  const logout = () => {
    localStorage.removeItem('token');
    window.location.href = '/login';
  };

  return (
    <nav className="navbar navbar-expand-lg navbar-dark bg-dark px-3">
      <Link className="navbar-brand" to="/">ShoppingCart</Link>
      <div className="collapse navbar-collapse">
        <ul className="navbar-nav ms-auto">
          <li className="nav-item">
            <Link className="nav-link" to="/">Register</Link>
          </li>
          <li className="nav-item">
            <Link className="nav-link" to="/login">Login</Link>
          </li>
          <li className="nav-item">
            <Link className="nav-link" to="/products">Products</Link>
          </li>
          <li className="nav-item">
            <button className="btn btn-outline-light ms-2" onClick={logout}>Logout</button>
          </li>
        </ul>
      </div>
    </nav>
  );
}





==============================
üßë FRONTEND: Register.jsx
==============================
import React, { useState } from 'react';
import axios from 'axios';

export default function Register() {
  const [user, setUser] = useState({ username: '', email: '', password: '' });

  const handleSubmit = (e) => {
    e.preventDefault();
    axios.post('http://localhost:5000/register', user)
      .then(res => alert(res.data.message))
      .catch(err => alert("Registration failed"));
  };

  return (
    <div className="container mt-5 col-md-4">
      <h3 className="mb-3">Register</h3>
      <form onSubmit={handleSubmit}>
        <input type="text" className="form-control mb-3" placeholder="Username"
          required onChange={e => setUser({ ...user, username: e.target.value })} />
        <input type="email" className="form-control mb-3" placeholder="Email"
          required onChange={e => setUser({ ...user, email: e.target.value })} />
        <input type="password" className="form-control mb-3" placeholder="Password"
          required onChange={e => setUser({ ...user, password: e.target.value })} />
        <button className="btn btn-primary w-100">Register</button>
      </form>
    </div>
  );
}




==============================
üßë FRONTEND: Login.jsx
==============================
import React, { useState } from 'react';
import axios from 'axios';

export default function Login() {
  const [user, setUser] = useState({ username: '', password: '' });

  const handleLogin = (e) => {
    e.preventDefault();
    axios.post('http://localhost:5000/login', user)
      .then(res => {
        localStorage.setItem('token', res.data.token);
        window.location.href = '/products';
      })
      .catch(err => alert("Invalid credentials"));
  };

  return (
    <div className="container mt-5 col-md-4">
      <h3 className="mb-3">Login</h3>
      <form onSubmit={handleLogin}>
        <input type="text" className="form-control mb-3" placeholder="Username"
          required onChange={e => setUser({ ...user, username: e.target.value })} />
        <input type="password" className="form-control mb-3" placeholder="Password"
          required onChange={e => setUser({ ...user, password: e.target.value })} />
        <button className="btn btn-success w-100">Login</button>
      </form>
    </div>
  );
}




==============================
üßë FRONTEND: Product.jsx
==============================
import React, { useEffect, useState } from 'react';
import axios from 'axios';

export default function Products() {
  const [products, setProducts] = useState([]);
  const token = localStorage.getItem('token');

  useEffect(() => {
    axios.get('http://localhost:5000/products', {
      headers: { Authorization: `Bearer ${token}` }
    }).then(res => setProducts(res.data))
      .catch(() => alert("Unauthorized or failed to fetch"));
  }, []);

  const deleteProduct = (id) => {
    axios.delete(`http://localhost:5000/products/${id}`, {
      headers: { Authorization: `Bearer ${token}` }
    }).then(() => window.location.reload());
  };

  return (
    <div className="container mt-5">
      <h3 className="mb-3">Product List</h3>
      <table className="table table-bordered">
        <thead className="table-dark">
          <tr>
            <th>Name</th><th>Price</th><th>Description</th><th>Action</th>
          </tr>
        </thead>
        <tbody>
          {products.map(p => (
            <tr key={p.id}>
              <td>{p.name}</td>
              <td>‚Çπ{p.price}</td>
              <td>{p.description}</td>
              <td>
                <button className="btn btn-danger btn-sm" onClick={() => deleteProduct(p.id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}







==============================
üì¨ POSTMAN USAGE
==============================

‚úÖ 1. Get All Products
Method: GET

URL: http://localhost:5000/products

Hit Send

‚úîÔ∏è Returns JSON list of all products

‚úÖ 2. Get Product by ID
Method: GET

URL: http://localhost:5000/products/1

Hit Send

‚úîÔ∏è Returns product with ID 1

‚úÖ 3. Add New Product
Method: POST

URL: http://localhost:5000/products

Headers:
Content-Type: application/json

Body ‚Üí raw ‚Üí JSON:

json
Copy
Edit
{
  "name": "Sunglasses",
  "description": "UV protected sunglasses",
  "price": 799,
  "quantity": 25
}
Hit Send

‚úîÔ∏è Returns:

json
Copy
Edit
{
  "message": "Product added",
  "id": 6
}
